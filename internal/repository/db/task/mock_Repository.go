// Code generated by mockery v2.39.1. DO NOT EDIT.

package task

import (
	model "base/internal/repository/db/model"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

// CreateTask provides a mock function with given fields: ctx, request
func (_m *MockRepository) CreateTask(ctx context.Context, request model.Task) (model.Task, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CreateTask")
	}

	var r0 model.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Task) (model.Task, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.Task) model.Task); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Get(0).(model.Task)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.Task) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTask provides a mock function with given fields: ctx, id
func (_m *MockRepository) DeleteTask(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllTasks provides a mock function with given fields: ctx
func (_m *MockRepository) GetAllTasks(ctx context.Context) ([]model.Task, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllTasks")
	}

	var r0 []model.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]model.Task, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []model.Task); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTaskByID provides a mock function with given fields: ctx, id
func (_m *MockRepository) GetTaskByID(ctx context.Context, id int64) (model.Task, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetTaskByID")
	}

	var r0 model.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (model.Task, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) model.Task); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(model.Task)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTask provides a mock function with given fields: ctx, id, title
func (_m *MockRepository) UpdateTask(ctx context.Context, id int64, title string) (model.Task, error) {
	ret := _m.Called(ctx, id, title)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTask")
	}

	var r0 model.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) (model.Task, error)); ok {
		return rf(ctx, id, title)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) model.Task); ok {
		r0 = rf(ctx, id, title)
	} else {
		r0 = ret.Get(0).(model.Task)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, string) error); ok {
		r1 = rf(ctx, id, title)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
